#!/usr/bin/python
#
# BLAH GPL BLAH
#
# Copyright 2012 Red Hat Inc.
#
# Author: Will Woods <wwoods@redhat.com>

import os, sys, time

from fedup.download import FedupDownloader, YumBaseError
from fedup.upgrade import FedupUpgrade, TransactionError

import logging, fedup.logutils
log = logging.getLogger("fedup")
fedup.logutils.debuglog("fedup.log") # FIXME: better dir for this
fedup.logutils.consolelog()          # FIXME: control output with cli args

_ = lambda x: x # TODO: i18n

from fedup import textoutput as output

def download_pkgs(version):
    print "setting up repos..."
    f = FedupDownloader(version=version)
    repo_cb = output.RepoCallback()
    repo_prog = output.RepoProgress(fo=sys.stderr)
    f.check_repos(callback=repo_cb, progressbar=repo_prog)

    print "setting up update..."
    updates = f.build_update_transaction(callback=output.DepsolveCallback(f))
    f.download_packages(updates, callback=output.DownloadCallback())
    f.clean_cache()

    return set(po.localPkg() for po in updates)

def transaction_test(pkgs):
    print "setting up upgrade transaction test"
    fu = FedupUpgrade()
    fu.setup_transaction(pkgfiles=pkgs)
    fu.test_transaction(callback=output.TransactionCallback(numpkgs=len(pkgs)))

def main():
    log.info("%s starting at %s", sys.argv[0], time.asctime())
    # depsolve & download
    pkgs = download_pkgs(version="18") # or "rawhide"
    # TODO: checkpoint - don't depsolve again (until timeout)
    # transaction test
    transaction_test(pkgs)
    # TODO: fetch kernel & initrd
    # TODO: modify bootloader config
    # TODO: reboot

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print
        log.info("exiting on keyboard interrupt")
        raise SystemExit(1)
    except YumBaseError as e:
        print
        if isinstance(e.value, list):
            err = e.value.pop(0)
            print _("Downloading failed: %s") % err
            for p in e.value:
                print "  %s" % p
        else:
            print _("Downloading failed: %s") % e
        raise SystemExit(2)
    except TransactionError as e:
        print
        print _("Transaction test failed with the following problems")
        for p in e.problems:
            print p
        raise SystemExit(3)
    finally:
        def theend():
            log.info("%s exiting", sys.argv[0])
        theend()
